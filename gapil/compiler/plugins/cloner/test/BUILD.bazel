# Copyright (C) 2018 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")
load("//tools/build:rules.bzl", "api_library", "apic_binary", "apic_compile", "apic_template", "cc_copts", "embed")

filegroup(
    name = "api_files",
    srcs = glob(["*.api"]),
    visibility = ["//visibility:public"],
)

api_library(
    name = "api",
    api = "cloner.api",
    apiname = "test",
    includes = [":api_files"],
    visibility = ["//visibility:public"],
)

apic_compile(
    name = "api_compiled",
    apis = [":api"],
    emit = ["clone"],
    symbols = "c",
)

apic_template(
    name = "generated",
    api = ":api",
    templates = [
        "//gapis/api/templates:api",
        "//gapis/api/templates:definition",
    ],
    visibility = ["//visibility:public"],
)

apic_binary(
    name = "api_binary",
    api = ":api",
)

embed(
    name = "embed",
    srcs = [":api_binary"],
    package = "test",
)

# Needed because apic_compile, can't (yet) return a cc provider.
# :api_compiled produces a .o file, so this doesn't actually compile anything.
cc_library(
    name = "api_lib",
    srcs = [":api_compiled"],
)

apic_template(
    name = "ctypes_h",
    api = ":api",
    templates = [
        "//gapis/api/templates:ctypes_h",
        "//gapis/api/templates:definition",
    ],
)

cc_library(
    name = "headers",
    hdrs = [":ctypes_h"],
    copts = cc_copts(),
    visibility = ["//visibility:public"],
)

go_library(
    name = "go_default_library",
    srcs = [
        "shims.go",
        ":embed",  # keep
        ":generated",  # keep
    ],
    cdeps = [
        ":headers",
        ":api_lib",
        "//gapil/runtime/cc",
        "//gapil/runtime/cc/cloner:cc",
    ],
    cgo = True,  # keep
    copts = cc_copts(),  # keep
    importpath = "github.com/google/gapid/gapil/compiler/plugins/cloner/test",
    visibility = ["//visibility:public"],
    deps = [
        "//core/data:go_default_library",  # keep
        "//core/data/binary:go_default_library",  # keep
        "//core/data/id:go_default_library",  # keep
        "//core/data/slice:go_default_library",  # keep
        "//core/math/interval:go_default_library",
        "//core/math/u64:go_default_library",  # keep
        "//core/memory/arena:go_default_library",  # keep
        "//core/os/device:go_default_library",  # keep
        "//gapil/bapi:go_default_library",  # keep
        "//gapil/constset:go_default_library",
        "//gapil/executor:go_default_library",  # keep
        "//gapis/api:go_default_library",
        "//gapis/memory:go_default_library",  # keep
        "//gapis/replay:go_default_library",  # keep
        "//gapis/replay/builder:go_default_library",
        "//gapis/replay/protocol:go_default_library",  # keep
        "//gapis/replay/value:go_default_library",  # keep
        "//gapis/service/path:go_default_library",
    ],
)

go_test(
    name = "go_default_test",
    size = "small",
    srcs = ["cloner_test.go"],
    embed = [":go_default_library"],
    deps = [
        "//core/assert:go_default_library",
        "//core/log:go_default_library",
        "//core/memory/arena:go_default_library",
        "//gapil/executor:go_default_library",
        "//gapis/capture:go_default_library",
        "//gapis/database:go_default_library",
        "//gapis/memory:go_default_library",
    ],
)
